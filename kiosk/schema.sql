BEGIN TRANSACTION;
DROP TABLE IF EXISTS "MENU";
CREATE TABLE IF NOT EXISTS "MENU" (
	"ID"	INTEGER,
	"NAME"	TEXT UNIQUE,
	"IMAGE_PATH"	TEXT,
	"PRICE"	INTEGER,
	"DESC"	TEXT,
	"IS_SOLDOUT"	INTEGER,
	"WEIGHT_G"	REAL,
	"KCAL"	REAL,
	"PROTEIN_G"	REAL,
	"PROTEIN_PCENT"	REAL,
	"SODIUM_MG"	REAL,
	"SODIUM_PCENT"	REAL,
	"SUGAR_G"	REAL,
	"SAT_FAT_G"	REAL,
	"SAT_FAT_PCENT"	REAL,
	"CAFFEINE_MG"	REAL,
	"ALLERGY_INFO"	TEXT,
	PRIMARY KEY("ID")
);
DROP TABLE IF EXISTS "INGRD_USE";
CREATE TABLE IF NOT EXISTS "INGRD_USE" (
	"MENU_ID"	INTEGER,
	"INGRD_ID"	INTEGER,
	"AMT"	REAL,
	FOREIGN KEY("MENU_ID") REFERENCES "MENU"("ID"),
	FOREIGN KEY("INGRD_ID") REFERENCES "INGREDIENT"("ID"),
	PRIMARY KEY("MENU_ID","INGRD_ID")
);
DROP TABLE IF EXISTS "MENU_OPT";
CREATE TABLE IF NOT EXISTS "MENU_OPT" (
	"MENU_ID"	INTEGER,
	"OPT_TAG"	TEXT,
	"QTY_MIN"	INTEGER,
	"QTY_MAX"	INTEGER,
	FOREIGN KEY("MENU_ID") REFERENCES "MENU"("ID"),
	PRIMARY KEY("MENU_ID","OPT_TAG")
);
DROP TABLE IF EXISTS "MENU_CATEGORY";
CREATE TABLE IF NOT EXISTS "MENU_CATEGORY" (
	"MENU_ID"	INTEGER,
	"CATEGORY_TAG"	TEXT,
	FOREIGN KEY("MENU_ID") REFERENCES "MENU"("ID"),
	PRIMARY KEY("MENU_ID","CATEGORY_TAG")
);
DROP TABLE IF EXISTS "OPT_PRICE";
CREATE TABLE IF NOT EXISTS "OPT_PRICE" (
	"MENU_ID"	INTEGER,
	"OPT_TAG"	TEXT,
	"OPT_PRICE"	INTEGER,
	FOREIGN KEY("MENU_ID") REFERENCES "MENU"("ID"),
	PRIMARY KEY("MENU_ID","OPT_TAG")
);
DROP TABLE IF EXISTS "ORDER_ITEM";
CREATE TABLE IF NOT EXISTS "ORDER_ITEM" (
	"ORDER_ID"	INTEGER,
	"ITEM_NO"	INTEGER,
	"MAIN_DISH_ID"	INTEGER,
	"QTY"	INTEGER,
	"MAIN_DISH_TOTAL"	INTEGER,
	FOREIGN KEY("ORDER_ID") REFERENCES "ORDERS"("ID"),
	FOREIGN KEY("MAIN_DISH_ID") REFERENCES "MENU"("ID"),
	PRIMARY KEY("ORDER_ID","ITEM_NO")
);
DROP TABLE IF EXISTS "OPT_CHOICE";
CREATE TABLE IF NOT EXISTS "OPT_CHOICE" (
	"ORDER_ID"	INTEGER,
	"ITEM_NO"	INTEGER,
	"OPTION_ID"	INTEGER,
	"OPT_QTY"	INTEGER,
	"OPT_TOTAL"	INTEGER,
	FOREIGN KEY("OPTION_ID") REFERENCES "MENU"("ID"),
	FOREIGN KEY("ITEM_NO","ORDER_ID") REFERENCES "ORDER_ITEM"("ITEM_NO","ORDER_ID"),
	PRIMARY KEY("ORDER_ID","OPTION_ID","ITEM_NO")
);
DROP TABLE IF EXISTS "MANAGER";
CREATE TABLE IF NOT EXISTS "MANAGER" (
	"ID"	INTEGER,
	"LOGIN_ID"	TEXT UNIQUE,
	"LOGIN_PWD"	TEXT,
	"NAME"	TEXT,
	"POSITION"	TEXT,
	PRIMARY KEY("ID")
);
DROP TABLE IF EXISTS "ORDER";
DROP TABLE IF EXISTS "ORDERS";
CREATE TABLE IF NOT EXISTS "ORDERS" (
	"ID"	INTEGER,
	"WAIT_NO"	INTEGER,
	"STATUS"	TEXT,
	"ORDERED_AT"	timestamp,
	"SERVED_AT"	timestamp,
	"CANCELLED_AT"	timestamp,
	"RECEIPT_TOTAL"	INTEGER,
	"IS_TOGO"	INTEGER,
	"PAY_METHOD"	TEXT,
	PRIMARY KEY("ID")
);
DROP TABLE IF EXISTS "INGREDIENT";
CREATE TABLE IF NOT EXISTS "INGREDIENT" (
	"ID"	INTEGER,
	"NAME"	TEXT UNIQUE,
	"STOCK"	REAL,
	"UNIT"	TEXT,
	"IMAGE_PATH"	TEXT,
	PRIMARY KEY("ID")
);
DROP TRIGGER IF EXISTS update_ingredient_stock;
CREATE TRIGGER update_ingredient_stock AFTER UPDATE OF STOCK ON INGREDIENT 
BEGIN
	SELECT CASE
		WHEN ( new.STOCK < 0 )
		THEN RAISE (ROLLBACK, 'Not enough stock!')
	END;
  -- TODO: update `is_soldout` for each relevant dish
END;
COMMIT;
